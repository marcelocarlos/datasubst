on:
  release:
    types: [created, published]
  pull_request:
name: Build binaries
jobs:
  binaries:
    name: Build and upload
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.x

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build binaries
        run: |
          VERSION=$(git describe --tags)
          function build_datasubst() {
            DIR="$(mktemp -d)"
            mkdir "$DIR/datasubst"
            cp LICENSE "$DIR/datasubst"
            go build -o "$DIR/datasubst" -ldflags "-X main.Version=$VERSION" ./...
            tar -cvzf "datasubst-$VERSION-$GOOS-$GOARCH.tar.gz" -C "$DIR" datasubst
          }
          GOOS=linux GOARCH=amd64 build_datasubst
          GOOS=linux GOARCH=arm GOARM=6 build_datasubst
          GOOS=linux GOARCH=arm64 build_datasubst
          GOOS=darwin GOARCH=amd64 build_datasubst
          GOOS=darwin GOARCH=arm64 build_datasubst

      - name: Upload workflow artifacts
        uses: actions/upload-artifact@v2
        with:
          name: datasubst-binaries
          path: datasubst-*

      - name: Upload release artifacts
        uses: actions/github-script@v3
        if: ${{ github.event_name == 'release' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs").promises;
            const { repo: { owner, repo }, sha } = context;
            const release = await github.repos.getReleaseByTag({
              owner, repo,
              tag: process.env.GITHUB_REF.replace("refs/tags/", ""),
            });
            console.log("Release:", { release });
            for (let file of await fs.readdir(".")) {
              if (!file.startsWith("datasubst-")) continue;
              console.log("Uploading", file);
              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(file),
              });
            }

      - name: Log in to the Container registry
        # if: ${{ github.event_name == 'release' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push image
        # if: ${{ github.event_name == 'release' }}
        run: |
          VERSION=$(git describe --tags --abbrev=0)

          docker build -t ghcr.io/${{ github.repository }}:latest .
          docker tag ghcr.io/${{ github.repository }}:latest ghcr.io/${{ github.repository }}:${VERSION}
          docker tag ghcr.io/${{ github.repository }}:latest ghcr.io/${{ github.repository }}:${VERSION:0:4}
          docker tag ghcr.io/${{ github.repository }}:latest ghcr.io/${{ github.repository }}:${VERSION:0:2}

          docker push ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:${VERSION}
          docker push ghcr.io/${{ github.repository }}:${VERSION:0:4}
          docker push ghcr.io/${{ github.repository }}:${VERSION:0:2}

      - name: Trigger homebrew tap update
        if: ${{ github.event_name == 'release' }}
        run: |
          VERSION=$(git describe --tags)
          SHA256_DARWIN_AMD64=$(sha256sum datasubst-$VERSION-darwin-amd64.tar.gz | cut -d' ' -f 1)
          SHA256_DARWIN_ARM64=$(sha256sum datasubst-$VERSION-darwin-arm64.tar.gz  | cut -d' ' -f 1)
          SHA256_LINUX_AMD64=$(sha256sum datasubst-$VERSION-linux-amd64.tar.gz  | cut -d' ' -f 1)
          SHA256_LINUX_ARM=$(sha256sum datasubst-$VERSION-linux-arm.tar.gz  | cut -d' ' -f 1)
          SHA256_LINUX_ARM64=$(sha256sum datasubst-$VERSION-linux-arm64.tar.gz  | cut -d' ' -f 1)

          PAYLOAD=$(cat <<EOF
          {
              "event_type": "formula_update",
              "client_payload": {
                  "formula": "datasubst",
                  "version": "${VERSION:1}",
                  "sha256_darwin_amd64": "${SHA256_DARWIN_AMD64}",
                  "sha256_darwin_arm64": "${SHA256_DARWIN_ARM64}",
                  "sha256_linux_amd64": "${SHA256_LINUX_AMD64}",
                  "sha256_linux_arm": "${SHA256_LINUX_ARM}",
                  "sha256_linux_arm64": "${SHA256_LINUX_ARM64}"
              }
          }
          EOF
          )
          curl -vvvv --retry 3 --fail -s --data "$PAYLOAD" \
              -H "Authorization: token ${{ secrets.PERSONAL_GITHUB_TOKEN }}" \
              "https://api.github.com/repos/marcelocarlos/homebrew-tap/dispatches"
